// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `metrics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.MetricDescriptor)
pub struct MetricDescriptor {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.MetricDescriptor.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.MetricDescriptor.help)
    pub help: ::std::string::String,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.MetricDescriptor.type)
    pub type_: ::protobuf::EnumOrUnknown<MetricType>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.MetricDescriptor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetricDescriptor {
    fn default() -> &'a MetricDescriptor {
        <MetricDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl MetricDescriptor {
    pub fn new() -> MetricDescriptor {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &MetricDescriptor| { &m.name },
            |m: &mut MetricDescriptor| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "help",
            |m: &MetricDescriptor| { &m.help },
            |m: &mut MetricDescriptor| { &mut m.help },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &MetricDescriptor| { &m.type_ },
            |m: &mut MetricDescriptor| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetricDescriptor>(
            "MetricDescriptor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetricDescriptor {
    const NAME: &'static str = "MetricDescriptor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.help = is.read_string()?;
                },
                24 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.help.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.help);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(MetricType::COUNTER) {
            my_size += ::protobuf::rt::int32_size(3, self.type_.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.help.is_empty() {
            os.write_string(2, &self.help)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(MetricType::COUNTER) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetricDescriptor {
        MetricDescriptor::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.help.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(MetricType::COUNTER);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetricDescriptor {
        static instance: MetricDescriptor = MetricDescriptor {
            name: ::std::string::String::new(),
            help: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetricDescriptor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetricDescriptor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetricDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:com.tencent.easygraph.proto.MetricType)
pub enum MetricType {
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.proto.MetricType.COUNTER)
    COUNTER = 0,
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.proto.MetricType.SUMMERY)
    SUMMERY = 1,
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.proto.MetricType.HISTOGRAM)
    HISTOGRAM = 2,
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.proto.MetricType.GAUGE)
    GAUGE = 3,
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.proto.MetricType.MAX_LATENCY)
    MAX_LATENCY = 4,
}

impl ::protobuf::Enum for MetricType {
    const NAME: &'static str = "MetricType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricType> {
        match value {
            0 => ::std::option::Option::Some(MetricType::COUNTER),
            1 => ::std::option::Option::Some(MetricType::SUMMERY),
            2 => ::std::option::Option::Some(MetricType::HISTOGRAM),
            3 => ::std::option::Option::Some(MetricType::GAUGE),
            4 => ::std::option::Option::Some(MetricType::MAX_LATENCY),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MetricType] = &[
        MetricType::COUNTER,
        MetricType::SUMMERY,
        MetricType::HISTOGRAM,
        MetricType::GAUGE,
        MetricType::MAX_LATENCY,
    ];
}

impl ::protobuf::EnumFull for MetricType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MetricType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MetricType {
    fn default() -> Self {
        MetricType::COUNTER
    }
}

impl MetricType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MetricType>("MetricType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmetrics.proto\x12\x1bcom.tencent.easygraph.proto\"w\n\x10MetricDescr\
    iptor\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x12\n\x04help\
    \x18\x02\x20\x01(\tR\x04help\x12;\n\x04type\x18\x03\x20\x01(\x0e2'.com.t\
    encent.easygraph.proto.MetricTypeR\x04type*Q\n\nMetricType\x12\x0b\n\x07\
    COUNTER\x10\0\x12\x0b\n\x07SUMMERY\x10\x01\x12\r\n\tHISTOGRAM\x10\x02\
    \x12\t\n\x05GAUGE\x10\x03\x12\x0f\n\x0bMAX_LATENCY\x10\x04B\x02P\x01J\
    \x80\x04\n\x06\x12\x04\0\0\x11\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\0$\n\x08\n\x01\x08\x12\x03\x03\0\"\n\t\n\x02\x08\
    \n\x12\x03\x03\0\"\n\n\n\x02\x05\0\x12\x04\x05\0\x0b\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x05\x05\x0f\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x02\x0e\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03\x06\x02\t\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x06\x0c\r\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x07\x02\x0e\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x07\x02\t\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x07\x0c\r\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x08\x02\x10\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x08\x02\x0b\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x08\x0e\x0f\n\x0b\n\x04\x05\0\x02\x03\x12\x03\t\x02\x0c\n\x0c\n\
    \x05\x05\0\x02\x03\x01\x12\x03\t\x02\x07\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03\t\n\x0b\n\x0b\n\x04\x05\0\x02\x04\x12\x03\n\x02\x12\n\x0c\n\x05\
    \x05\0\x02\x04\x01\x12\x03\n\x02\r\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\
    \n\x10\x11\n\n\n\x02\x04\0\x12\x04\r\0\x11\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\r\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x02\x12\n\r\n\x05\x04\
    \0\x02\0\x04\x12\x04\x0e\x02\r\x1a\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x0e\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\t\r\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x0e\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0f\
    \x02\x12\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x0f\x02\x0e\x12\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x0f\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f\x10\x11\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\x10\x02\x16\n\r\n\x05\x04\0\x02\x02\x04\x12\
    \x04\x10\x02\x0f\x12\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x10\x02\x0c\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x10\r\x11\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\x10\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MetricDescriptor::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(MetricType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
