// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `coprocessor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.CountRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CountRequest {
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.CountRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CountRequest {
    fn default() -> &'a CountRequest {
        <CountRequest as ::protobuf::Message>::default_instance()
    }
}

impl CountRequest {
    pub fn new() -> CountRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountRequest>(
            "CountRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CountRequest {
    const NAME: &'static str = "CountRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CountRequest {
        CountRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CountRequest {
        static instance: CountRequest = CountRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CountRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CountRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.CountResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CountResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.CountResponse.counter)
    pub counter: i64,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.CountResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CountResponse {
    fn default() -> &'a CountResponse {
        <CountResponse as ::protobuf::Message>::default_instance()
    }
}

impl CountResponse {
    pub fn new() -> CountResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "counter",
            |m: &CountResponse| { &m.counter },
            |m: &mut CountResponse| { &mut m.counter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountResponse>(
            "CountResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CountResponse {
    const NAME: &'static str = "CountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.counter = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.counter != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.counter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.counter != 0 {
            os.write_int64(1, self.counter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CountResponse {
        CountResponse::new()
    }

    fn clear(&mut self) {
        self.counter = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CountResponse {
        static instance: CountResponse = CountResponse {
            counter: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CountResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CountResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.CountRequestV2)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CountRequestV2 {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.CountRequestV2.limit)
    pub limit: i32,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.CountRequestV2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CountRequestV2 {
    fn default() -> &'a CountRequestV2 {
        <CountRequestV2 as ::protobuf::Message>::default_instance()
    }
}

impl CountRequestV2 {
    pub fn new() -> CountRequestV2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "limit",
            |m: &CountRequestV2| { &m.limit },
            |m: &mut CountRequestV2| { &mut m.limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountRequestV2>(
            "CountRequestV2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CountRequestV2 {
    const NAME: &'static str = "CountRequestV2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.limit = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.limit != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.limit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.limit != 0 {
            os.write_int32(1, self.limit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CountRequestV2 {
        CountRequestV2::new()
    }

    fn clear(&mut self) {
        self.limit = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CountRequestV2 {
        static instance: CountRequestV2 = CountRequestV2 {
            limit: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CountRequestV2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CountRequestV2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CountRequestV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountRequestV2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.CountResponseV2)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CountResponseV2 {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.CountResponseV2.counter)
    pub counter: i64,
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.CountResponseV2.lastKey)
    pub lastKey: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.CountResponseV2.error)
    pub error: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.CountResponseV2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CountResponseV2 {
    fn default() -> &'a CountResponseV2 {
        <CountResponseV2 as ::protobuf::Message>::default_instance()
    }
}

impl CountResponseV2 {
    pub fn new() -> CountResponseV2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "counter",
            |m: &CountResponseV2| { &m.counter },
            |m: &mut CountResponseV2| { &mut m.counter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lastKey",
            |m: &CountResponseV2| { &m.lastKey },
            |m: &mut CountResponseV2| { &mut m.lastKey },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error",
            |m: &CountResponseV2| { &m.error },
            |m: &mut CountResponseV2| { &mut m.error },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountResponseV2>(
            "CountResponseV2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CountResponseV2 {
    const NAME: &'static str = "CountResponseV2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.counter = is.read_int64()?;
                },
                18 => {
                    self.lastKey = is.read_bytes()?;
                },
                26 => {
                    self.error = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.counter != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.counter);
        }
        if !self.lastKey.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.lastKey);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.counter != 0 {
            os.write_int64(1, self.counter)?;
        }
        if !self.lastKey.is_empty() {
            os.write_bytes(2, &self.lastKey)?;
        }
        if !self.error.is_empty() {
            os.write_string(3, &self.error)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CountResponseV2 {
        CountResponseV2::new()
    }

    fn clear(&mut self) {
        self.counter = 0;
        self.lastKey.clear();
        self.error.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CountResponseV2 {
        static instance: CountResponseV2 = CountResponseV2 {
            counter: 0,
            lastKey: ::std::vec::Vec::new(),
            error: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CountResponseV2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CountResponseV2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CountResponseV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountResponseV2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.PaginationRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PaginationRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.PaginationRequest.offset)
    pub offset: i64,
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.PaginationRequest.limit)
    pub limit: i64,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.PaginationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PaginationRequest {
    fn default() -> &'a PaginationRequest {
        <PaginationRequest as ::protobuf::Message>::default_instance()
    }
}

impl PaginationRequest {
    pub fn new() -> PaginationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "offset",
            |m: &PaginationRequest| { &m.offset },
            |m: &mut PaginationRequest| { &mut m.offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "limit",
            |m: &PaginationRequest| { &m.limit },
            |m: &mut PaginationRequest| { &mut m.limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PaginationRequest>(
            "PaginationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PaginationRequest {
    const NAME: &'static str = "PaginationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.offset = is.read_int64()?;
                },
                16 => {
                    self.limit = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.offset != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.offset);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.limit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.offset != 0 {
            os.write_int64(1, self.offset)?;
        }
        if self.limit != 0 {
            os.write_int64(2, self.limit)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PaginationRequest {
        PaginationRequest::new()
    }

    fn clear(&mut self) {
        self.offset = 0;
        self.limit = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PaginationRequest {
        static instance: PaginationRequest = PaginationRequest {
            offset: 0,
            limit: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PaginationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PaginationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PaginationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaginationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.KvPair)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KvPair {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.KvPair.key)
    pub key: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.KvPair.value)
    pub value: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.KvPair.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KvPair {
    fn default() -> &'a KvPair {
        <KvPair as ::protobuf::Message>::default_instance()
    }
}

impl KvPair {
    pub fn new() -> KvPair {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "key",
            |m: &KvPair| { &m.key },
            |m: &mut KvPair| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &KvPair| { &m.value },
            |m: &mut KvPair| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KvPair>(
            "KvPair",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KvPair {
    const NAME: &'static str = "KvPair";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.key = is.read_bytes()?;
                },
                18 => {
                    self.value = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KvPair {
        KvPair::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KvPair {
        static instance: KvPair = KvPair {
            key: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KvPair {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KvPair").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KvPair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KvPair {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.PaginationResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PaginationResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.PaginationResponse.kvs)
    pub kvs: ::std::vec::Vec<KvPair>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.PaginationResponse.error)
    pub error: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.PaginationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PaginationResponse {
    fn default() -> &'a PaginationResponse {
        <PaginationResponse as ::protobuf::Message>::default_instance()
    }
}

impl PaginationResponse {
    pub fn new() -> PaginationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "kvs",
            |m: &PaginationResponse| { &m.kvs },
            |m: &mut PaginationResponse| { &mut m.kvs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "error",
            |m: &PaginationResponse| { &m.error },
            |m: &mut PaginationResponse| { &mut m.error },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PaginationResponse>(
            "PaginationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PaginationResponse {
    const NAME: &'static str = "PaginationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.kvs.push(is.read_message()?);
                },
                18 => {
                    self.error = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.kvs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.kvs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PaginationResponse {
        PaginationResponse::new()
    }

    fn clear(&mut self) {
        self.kvs.clear();
        self.error.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PaginationResponse {
        static instance: PaginationResponse = PaginationResponse {
            kvs: ::std::vec::Vec::new(),
            error: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PaginationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PaginationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PaginationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PaginationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Request type
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:com.tencent.easygraph.coprocessor.RequestType)
pub enum RequestType {
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.coprocessor.RequestType.COUNT)
    COUNT = 0,
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.coprocessor.RequestType.PAGINATION)
    PAGINATION = 1,
}

impl ::protobuf::Enum for RequestType {
    const NAME: &'static str = "RequestType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RequestType> {
        match value {
            0 => ::std::option::Option::Some(RequestType::COUNT),
            1 => ::std::option::Option::Some(RequestType::PAGINATION),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<RequestType> {
        match str {
            "COUNT" => ::std::option::Option::Some(RequestType::COUNT),
            "PAGINATION" => ::std::option::Option::Some(RequestType::PAGINATION),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [RequestType] = &[
        RequestType::COUNT,
        RequestType::PAGINATION,
    ];
}

impl ::protobuf::EnumFull for RequestType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("RequestType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for RequestType {
    fn default() -> Self {
        RequestType::COUNT
    }
}

impl RequestType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<RequestType>("RequestType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11coprocessor.proto\x12!com.tencent.easygraph.coprocessor\"\x0e\n\
    \x0cCountRequest\")\n\rCountResponse\x12\x18\n\x07counter\x18\x01\x20\
    \x01(\x03R\x07counter\"&\n\x0eCountRequestV2\x12\x14\n\x05limit\x18\x01\
    \x20\x01(\x05R\x05limit\"[\n\x0fCountResponseV2\x12\x18\n\x07counter\x18\
    \x01\x20\x01(\x03R\x07counter\x12\x18\n\x07lastKey\x18\x02\x20\x01(\x0cR\
    \x07lastKey\x12\x14\n\x05error\x18\x03\x20\x01(\tR\x05error\"A\n\x11Pagi\
    nationRequest\x12\x16\n\x06offset\x18\x01\x20\x01(\x03R\x06offset\x12\
    \x14\n\x05limit\x18\x02\x20\x01(\x03R\x05limit\"0\n\x06KvPair\x12\x10\n\
    \x03key\x18\x01\x20\x01(\x0cR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\
    \x0cR\x05value\"g\n\x12PaginationResponse\x12;\n\x03kvs\x18\x01\x20\x03(\
    \x0b2).com.tencent.easygraph.coprocessor.KvPairR\x03kvs\x12\x14\n\x05err\
    or\x18\x02\x20\x01(\tR\x05error*(\n\x0bRequestType\x12\t\n\x05COUNT\x10\
    \0\x12\x0e\n\nPAGINATION\x10\x01J\xaa\x07\n\x06\x12\x04\0\0(\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0*\n\x1b\n\x02\x05\
    \0\x12\x04\x04\0\x07\x01\x1a\x0f\x20Request\x20type\r\n\n\n\n\x03\x05\0\
    \x01\x12\x03\x04\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\x05\x02\x0c\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03\x05\x02\x07\n\x0c\n\x05\x05\0\x02\0\
    \x02\x12\x03\x05\n\x0b\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x02\x11\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x06\x02\x0c\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x03\x06\x0f\x10\n\n\n\x02\x04\0\x12\x04\t\0\x0b\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\t\x08\x14\n\n\n\x02\x04\x01\x12\x04\r\0\x0f\x01\n\
    \n\n\x03\x04\x01\x01\x12\x03\r\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x0e\x02\x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x02\x07\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x0e\x08\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x0e\x12\x13\n\n\n\x02\x04\x02\x12\x04\x11\0\x13\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x11\x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x12\
    \x02\x12\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x12\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x12\x08\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x12\x10\x11\n\n\n\x02\x04\x03\x12\x04\x15\0\x19\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03\x15\x08\x17\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x16\x02\
    \x14\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03\x16\x08\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\
    \x16\x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x17\x02\x14\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03\x17\x08\x0f\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x17\x12\x13\
    \n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x18\x02\x13\n\x0c\n\x05\x04\x03\x02\
    \x02\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x18\
    \t\x0e\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x18\x11\x12\n\n\n\x02\x04\
    \x04\x12\x04\x1b\0\x1e\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1b\x08\x19\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03\x1c\x02\x13\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03\x1c\x02\x07\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1c\x08\
    \x0e\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1c\x11\x12\n\x0b\n\x04\x04\
    \x04\x02\x01\x12\x03\x1d\x02\x12\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\
    \x1d\x02\x07\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1d\x08\r\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x03\x1d\x10\x11\n\n\n\x02\x04\x05\x12\x04\
    \x20\0#\x01\n\n\n\x03\x04\x05\x01\x12\x03\x20\x08\x0e\n\x0b\n\x04\x04\
    \x05\x02\0\x12\x03!\x02\x10\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03!\x02\
    \x07\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03!\x08\x0b\n\x0c\n\x05\x04\x05\
    \x02\0\x03\x12\x03!\x0e\x0f\n\x0b\n\x04\x04\x05\x02\x01\x12\x03\"\x02\
    \x12\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03\"\x02\x07\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03\"\x08\r\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03\
    \"\x10\x11\n\n\n\x02\x04\x06\x12\x04%\0(\x01\n\n\n\x03\x04\x06\x01\x12\
    \x03%\x08\x1a\n\x0b\n\x04\x04\x06\x02\0\x12\x03&\x02\x1a\n\x0c\n\x05\x04\
    \x06\x02\0\x04\x12\x03&\x02\n\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03&\x0b\
    \x11\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03&\x12\x15\n\x0c\n\x05\x04\x06\
    \x02\0\x03\x12\x03&\x18\x19\n\x0b\n\x04\x04\x06\x02\x01\x12\x03'\x02\x13\
    \n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\x06\
    \x02\x01\x01\x12\x03'\t\x0e\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03'\x11\
    \x12b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(CountRequest::generated_message_descriptor_data());
            messages.push(CountResponse::generated_message_descriptor_data());
            messages.push(CountRequestV2::generated_message_descriptor_data());
            messages.push(CountResponseV2::generated_message_descriptor_data());
            messages.push(PaginationRequest::generated_message_descriptor_data());
            messages.push(KvPair::generated_message_descriptor_data());
            messages.push(PaginationResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(RequestType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
