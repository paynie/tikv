// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `coprocessor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.UpdateGraphMetaRequest)
pub struct UpdateGraphMetaRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.UpdateGraphMetaRequest.graphMetas)
    pub graphMetas: ::std::vec::Vec<super::meta::GraphMeta>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.UpdateGraphMetaRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateGraphMetaRequest {
    fn default() -> &'a UpdateGraphMetaRequest {
        <UpdateGraphMetaRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateGraphMetaRequest {
    pub fn new() -> UpdateGraphMetaRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "graphMetas",
            |m: &UpdateGraphMetaRequest| { &m.graphMetas },
            |m: &mut UpdateGraphMetaRequest| { &mut m.graphMetas },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateGraphMetaRequest>(
            "UpdateGraphMetaRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateGraphMetaRequest {
    const NAME: &'static str = "UpdateGraphMetaRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.graphMetas.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.graphMetas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.graphMetas {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateGraphMetaRequest {
        UpdateGraphMetaRequest::new()
    }

    fn clear(&mut self) {
        self.graphMetas.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateGraphMetaRequest {
        static instance: UpdateGraphMetaRequest = UpdateGraphMetaRequest {
            graphMetas: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateGraphMetaRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateGraphMetaRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateGraphMetaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateGraphMetaRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.UpdateGraphMetaResponse)
pub struct UpdateGraphMetaResponse {
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.UpdateGraphMetaResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateGraphMetaResponse {
    fn default() -> &'a UpdateGraphMetaResponse {
        <UpdateGraphMetaResponse as ::protobuf::Message>::default_instance()
    }
}

impl UpdateGraphMetaResponse {
    pub fn new() -> UpdateGraphMetaResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateGraphMetaResponse>(
            "UpdateGraphMetaResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateGraphMetaResponse {
    const NAME: &'static str = "UpdateGraphMetaResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateGraphMetaResponse {
        UpdateGraphMetaResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateGraphMetaResponse {
        static instance: UpdateGraphMetaResponse = UpdateGraphMetaResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateGraphMetaResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateGraphMetaResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateGraphMetaResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateGraphMetaResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.GetGraphMetaRequest)
pub struct GetGraphMetaRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.GetGraphMetaRequest.graphId)
    pub graphId: u32,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.GetGraphMetaRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetGraphMetaRequest {
    fn default() -> &'a GetGraphMetaRequest {
        <GetGraphMetaRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetGraphMetaRequest {
    pub fn new() -> GetGraphMetaRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "graphId",
            |m: &GetGraphMetaRequest| { &m.graphId },
            |m: &mut GetGraphMetaRequest| { &mut m.graphId },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetGraphMetaRequest>(
            "GetGraphMetaRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetGraphMetaRequest {
    const NAME: &'static str = "GetGraphMetaRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.graphId = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.graphId != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.graphId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.graphId != 0 {
            os.write_uint32(1, self.graphId)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetGraphMetaRequest {
        GetGraphMetaRequest::new()
    }

    fn clear(&mut self) {
        self.graphId = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetGraphMetaRequest {
        static instance: GetGraphMetaRequest = GetGraphMetaRequest {
            graphId: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetGraphMetaRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetGraphMetaRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetGraphMetaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGraphMetaRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Need not ranges
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.CountRequest)
pub struct CountRequest {
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.CountRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CountRequest {
    fn default() -> &'a CountRequest {
        <CountRequest as ::protobuf::Message>::default_instance()
    }
}

impl CountRequest {
    pub fn new() -> CountRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountRequest>(
            "CountRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CountRequest {
    const NAME: &'static str = "CountRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CountRequest {
        CountRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CountRequest {
        static instance: CountRequest = CountRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CountRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CountRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.coprocessor.CountResponse)
pub struct CountResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.coprocessor.CountResponse.counter)
    pub counter: i64,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.coprocessor.CountResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CountResponse {
    fn default() -> &'a CountResponse {
        <CountResponse as ::protobuf::Message>::default_instance()
    }
}

impl CountResponse {
    pub fn new() -> CountResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "counter",
            |m: &CountResponse| { &m.counter },
            |m: &mut CountResponse| { &mut m.counter },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountResponse>(
            "CountResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CountResponse {
    const NAME: &'static str = "CountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.counter = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.counter != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.counter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.counter != 0 {
            os.write_int64(1, self.counter)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CountResponse {
        CountResponse::new()
    }

    fn clear(&mut self) {
        self.counter = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CountResponse {
        static instance: CountResponse = CountResponse {
            counter: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CountResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CountResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Request type
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:com.tencent.easygraph.coprocessor.RequestType)
pub enum RequestType {
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.coprocessor.RequestType.UPDATE_GRAPH_META)
    UPDATE_GRAPH_META = 0,
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.coprocessor.RequestType.GET_GRAPH_META)
    GET_GRAPH_META = 1,
    // @@protoc_insertion_point(enum_value:com.tencent.easygraph.coprocessor.RequestType.COUNT)
    COUNT = 2,
}

impl ::protobuf::Enum for RequestType {
    const NAME: &'static str = "RequestType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RequestType> {
        match value {
            0 => ::std::option::Option::Some(RequestType::UPDATE_GRAPH_META),
            1 => ::std::option::Option::Some(RequestType::GET_GRAPH_META),
            2 => ::std::option::Option::Some(RequestType::COUNT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [RequestType] = &[
        RequestType::UPDATE_GRAPH_META,
        RequestType::GET_GRAPH_META,
        RequestType::COUNT,
    ];
}

impl ::protobuf::EnumFull for RequestType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("RequestType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for RequestType {
    fn default() -> Self {
        RequestType::UPDATE_GRAPH_META
    }
}

impl RequestType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<RequestType>("RequestType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11coprocessor.proto\x12!com.tencent.easygraph.coprocessor\x1a\nmeta.\
    proto\"`\n\x16UpdateGraphMetaRequest\x12F\n\ngraphMetas\x18\x01\x20\x03(\
    \x0b2&.com.tencent.easygraph.proto.GraphMetaR\ngraphMetas\"\x19\n\x17Upd\
    ateGraphMetaResponse\"/\n\x13GetGraphMetaRequest\x12\x18\n\x07graphId\
    \x18\x01\x20\x01(\rR\x07graphId\"\x0e\n\x0cCountRequest\")\n\rCountRespo\
    nse\x12\x18\n\x07counter\x18\x01\x20\x01(\x03R\x07counter*C\n\x0bRequest\
    Type\x12\x15\n\x11UPDATE_GRAPH_META\x10\0\x12\x12\n\x0eGET_GRAPH_META\
    \x10\x01\x12\t\n\x05COUNT\x10\x02J\xa8\x04\n\x06\x12\x04\0\0\x1e\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0*\n\t\n\x02\
    \x03\0\x12\x03\x02\0\x14\n\x1b\n\x02\x05\0\x12\x04\x05\0\t\x01\x1a\x0f\
    \x20Request\x20type\r\n\n\n\n\x03\x05\0\x01\x12\x03\x05\x05\x10\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03\x06\x02\x18\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    \x06\x02\x13\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x06\x16\x17\n\x0b\n\x04\
    \x05\0\x02\x01\x12\x03\x07\x02\x15\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\
    \x07\x02\x10\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x07\x13\x14\n\x0b\n\
    \x04\x05\0\x02\x02\x12\x03\x08\x02\x0c\n\x0c\n\x05\x05\0\x02\x02\x01\x12\
    \x03\x08\x02\x07\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x08\n\x0b\n\n\n\
    \x02\x04\0\x12\x04\x0b\0\r\x01\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x1e\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x02@\n\x0c\n\x05\x04\0\x02\0\x04\x12\
    \x03\x0c\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x0b0\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0c1;\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c>?\
    \n\n\n\x02\x04\x01\x12\x04\x0f\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \x0f\x08\x1f\n\n\n\x02\x04\x02\x12\x04\x13\0\x15\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x13\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x14\x02\x15\n\
    \r\n\x05\x04\x02\x02\0\x04\x12\x04\x14\x02\x13\x1d\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x14\
    \t\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x14\x13\x14\n\x1e\n\x02\x04\
    \x03\x12\x04\x18\0\x1a\x01\x1a\x12\x20Need\x20not\x20ranges\r\n\n\n\n\
    \x03\x04\x03\x01\x12\x03\x18\x08\x14\n\n\n\x02\x04\x04\x12\x04\x1c\0\x1e\
    \x01\n\n\n\x03\x04\x04\x01\x12\x03\x1c\x08\x15\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03\x1d\x02\x14\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\x1d\x02\x1c\x17\
    \n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1d\x02\x07\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03\x1d\x08\x0f\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1d\
    \x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::meta::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(UpdateGraphMetaRequest::generated_message_descriptor_data());
            messages.push(UpdateGraphMetaResponse::generated_message_descriptor_data());
            messages.push(GetGraphMetaRequest::generated_message_descriptor_data());
            messages.push(CountRequest::generated_message_descriptor_data());
            messages.push(CountResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(RequestType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
