// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `import.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.AuthHeader)
pub struct AuthHeader {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.AuthHeader.user)
    pub user: ::std::string::String,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.AuthHeader.password)
    pub password: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.AuthHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthHeader {
    fn default() -> &'a AuthHeader {
        <AuthHeader as ::protobuf::Message>::default_instance()
    }
}

impl AuthHeader {
    pub fn new() -> AuthHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user",
            |m: &AuthHeader| { &m.user },
            |m: &mut AuthHeader| { &mut m.user },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "password",
            |m: &AuthHeader| { &m.password },
            |m: &mut AuthHeader| { &mut m.password },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthHeader>(
            "AuthHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthHeader {
    const NAME: &'static str = "AuthHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.user = is.read_string()?;
                },
                18 => {
                    self.password = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.user.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.user);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.user.is_empty() {
            os.write_string(1, &self.user)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthHeader {
        AuthHeader::new()
    }

    fn clear(&mut self) {
        self.user.clear();
        self.password.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthHeader {
        static instance: AuthHeader = AuthHeader {
            user: ::std::string::String::new(),
            password: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.UploadRequest)
pub struct UploadRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.UploadRequest.header)
    pub header: ::protobuf::MessageField<AuthHeader>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.UploadRequest.file_name)
    pub file_name: ::std::string::String,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.UploadRequest.buffer)
    pub buffer: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.UploadRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadRequest {
    fn default() -> &'a UploadRequest {
        <UploadRequest as ::protobuf::Message>::default_instance()
    }
}

impl UploadRequest {
    pub fn new() -> UploadRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AuthHeader>(
            "header",
            |m: &UploadRequest| { &m.header },
            |m: &mut UploadRequest| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file_name",
            |m: &UploadRequest| { &m.file_name },
            |m: &mut UploadRequest| { &mut m.file_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buffer",
            |m: &UploadRequest| { &m.buffer },
            |m: &mut UploadRequest| { &mut m.buffer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadRequest>(
            "UploadRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadRequest {
    const NAME: &'static str = "UploadRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.file_name = is.read_string()?;
                },
                26 => {
                    self.buffer = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.file_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.file_name);
        }
        if !self.buffer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.buffer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.file_name.is_empty() {
            os.write_string(2, &self.file_name)?;
        }
        if !self.buffer.is_empty() {
            os.write_bytes(3, &self.buffer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadRequest {
        UploadRequest::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.file_name.clear();
        self.buffer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadRequest {
        static instance: UploadRequest = UploadRequest {
            header: ::protobuf::MessageField::none(),
            file_name: ::std::string::String::new(),
            buffer: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.UploadResponse)
pub struct UploadResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.UploadResponse.ok)
    pub ok: bool,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.UploadResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadResponse {
    fn default() -> &'a UploadResponse {
        <UploadResponse as ::protobuf::Message>::default_instance()
    }
}

impl UploadResponse {
    pub fn new() -> UploadResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &UploadResponse| { &m.ok },
            |m: &mut UploadResponse| { &mut m.ok },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadResponse>(
            "UploadResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadResponse {
    const NAME: &'static str = "UploadResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadResponse {
        UploadResponse::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadResponse {
        static instance: UploadResponse = UploadResponse {
            ok: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.ImportRequest)
pub struct ImportRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.ImportRequest.header)
    pub header: ::protobuf::MessageField<AuthHeader>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.ImportRequest.task)
    pub task: ::protobuf::MessageField<super::load::TaskConfig>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.ImportRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ImportRequest {
    fn default() -> &'a ImportRequest {
        <ImportRequest as ::protobuf::Message>::default_instance()
    }
}

impl ImportRequest {
    pub fn new() -> ImportRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AuthHeader>(
            "header",
            |m: &ImportRequest| { &m.header },
            |m: &mut ImportRequest| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::load::TaskConfig>(
            "task",
            |m: &ImportRequest| { &m.task },
            |m: &mut ImportRequest| { &mut m.task },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImportRequest>(
            "ImportRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ImportRequest {
    const NAME: &'static str = "ImportRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.task)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.task.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.task.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ImportRequest {
        ImportRequest::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.task.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ImportRequest {
        static instance: ImportRequest = ImportRequest {
            header: ::protobuf::MessageField::none(),
            task: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ImportRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ImportRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ImportRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ImportRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.ImportResponse)
pub struct ImportResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.ImportResponse.ok)
    pub ok: bool,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.ImportResponse.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.ImportResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ImportResponse {
    fn default() -> &'a ImportResponse {
        <ImportResponse as ::protobuf::Message>::default_instance()
    }
}

impl ImportResponse {
    pub fn new() -> ImportResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &ImportResponse| { &m.ok },
            |m: &mut ImportResponse| { &mut m.ok },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &ImportResponse| { &m.message },
            |m: &mut ImportResponse| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImportResponse>(
            "ImportResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ImportResponse {
    const NAME: &'static str = "ImportResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ImportResponse {
        ImportResponse::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ImportResponse {
        static instance: ImportResponse = ImportResponse {
            ok: false,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ImportResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ImportResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ImportResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ImportResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.ShowTaskRequest)
pub struct ShowTaskRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.ShowTaskRequest.header)
    pub header: ::protobuf::MessageField<AuthHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.ShowTaskRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ShowTaskRequest {
    fn default() -> &'a ShowTaskRequest {
        <ShowTaskRequest as ::protobuf::Message>::default_instance()
    }
}

impl ShowTaskRequest {
    pub fn new() -> ShowTaskRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AuthHeader>(
            "header",
            |m: &ShowTaskRequest| { &m.header },
            |m: &mut ShowTaskRequest| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShowTaskRequest>(
            "ShowTaskRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ShowTaskRequest {
    const NAME: &'static str = "ShowTaskRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ShowTaskRequest {
        ShowTaskRequest::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ShowTaskRequest {
        static instance: ShowTaskRequest = ShowTaskRequest {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ShowTaskRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ShowTaskRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ShowTaskRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShowTaskRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.ShowTaskResponse)
pub struct ShowTaskResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.ShowTaskResponse.progress)
    pub progress: f64,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.ShowTaskResponse.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.ShowTaskResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ShowTaskResponse {
    fn default() -> &'a ShowTaskResponse {
        <ShowTaskResponse as ::protobuf::Message>::default_instance()
    }
}

impl ShowTaskResponse {
    pub fn new() -> ShowTaskResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "progress",
            |m: &ShowTaskResponse| { &m.progress },
            |m: &mut ShowTaskResponse| { &mut m.progress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &ShowTaskResponse| { &m.message },
            |m: &mut ShowTaskResponse| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShowTaskResponse>(
            "ShowTaskResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ShowTaskResponse {
    const NAME: &'static str = "ShowTaskResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.progress = is.read_double()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.progress != 0. {
            my_size += 1 + 8;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.progress != 0. {
            os.write_double(1, self.progress)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ShowTaskResponse {
        ShowTaskResponse::new()
    }

    fn clear(&mut self) {
        self.progress = 0.;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ShowTaskResponse {
        static instance: ShowTaskResponse = ShowTaskResponse {
            progress: 0.,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ShowTaskResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ShowTaskResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ShowTaskResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShowTaskResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.LsRequest)
pub struct LsRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.LsRequest.header)
    pub header: ::protobuf::MessageField<AuthHeader>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.LsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LsRequest {
    fn default() -> &'a LsRequest {
        <LsRequest as ::protobuf::Message>::default_instance()
    }
}

impl LsRequest {
    pub fn new() -> LsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AuthHeader>(
            "header",
            |m: &LsRequest| { &m.header },
            |m: &mut LsRequest| { &mut m.header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LsRequest>(
            "LsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LsRequest {
    const NAME: &'static str = "LsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LsRequest {
        LsRequest::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LsRequest {
        static instance: LsRequest = LsRequest {
            header: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.LsResponse)
pub struct LsResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.LsResponse.files)
    pub files: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.LsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LsResponse {
    fn default() -> &'a LsResponse {
        <LsResponse as ::protobuf::Message>::default_instance()
    }
}

impl LsResponse {
    pub fn new() -> LsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "files",
            |m: &LsResponse| { &m.files },
            |m: &mut LsResponse| { &mut m.files },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LsResponse>(
            "LsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LsResponse {
    const NAME: &'static str = "LsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.files.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.files {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.files {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LsResponse {
        LsResponse::new()
    }

    fn clear(&mut self) {
        self.files.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LsResponse {
        static instance: LsResponse = LsResponse {
            files: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.RmRequest)
pub struct RmRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.RmRequest.header)
    pub header: ::protobuf::MessageField<AuthHeader>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.RmRequest.file)
    pub file: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.RmRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RmRequest {
    fn default() -> &'a RmRequest {
        <RmRequest as ::protobuf::Message>::default_instance()
    }
}

impl RmRequest {
    pub fn new() -> RmRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AuthHeader>(
            "header",
            |m: &RmRequest| { &m.header },
            |m: &mut RmRequest| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file",
            |m: &RmRequest| { &m.file },
            |m: &mut RmRequest| { &mut m.file },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RmRequest>(
            "RmRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RmRequest {
    const NAME: &'static str = "RmRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                18 => {
                    self.file = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.file.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.file);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.file.is_empty() {
            os.write_string(2, &self.file)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RmRequest {
        RmRequest::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.file.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RmRequest {
        static instance: RmRequest = RmRequest {
            header: ::protobuf::MessageField::none(),
            file: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RmRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RmRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RmRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RmRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.proto.RmResponse)
pub struct RmResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.RmResponse.ok)
    pub ok: bool,
    // @@protoc_insertion_point(field:com.tencent.easygraph.proto.RmResponse.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.proto.RmResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RmResponse {
    fn default() -> &'a RmResponse {
        <RmResponse as ::protobuf::Message>::default_instance()
    }
}

impl RmResponse {
    pub fn new() -> RmResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &RmResponse| { &m.ok },
            |m: &mut RmResponse| { &mut m.ok },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &RmResponse| { &m.message },
            |m: &mut RmResponse| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RmResponse>(
            "RmResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RmResponse {
    const NAME: &'static str = "RmResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RmResponse {
        RmResponse::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RmResponse {
        static instance: RmResponse = RmResponse {
            ok: false,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RmResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RmResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RmResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RmResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cimport.proto\x12\x1bcom.tencent.easygraph.proto\x1a\nload.proto\"<\
    \n\nAuthHeader\x12\x12\n\x04user\x18\x01\x20\x01(\tR\x04user\x12\x1a\n\
    \x08password\x18\x02\x20\x01(\tR\x08password\"\x85\x01\n\rUploadRequest\
    \x12?\n\x06header\x18\x01\x20\x01(\x0b2'.com.tencent.easygraph.proto.Aut\
    hHeaderR\x06header\x12\x1b\n\tfile_name\x18\x02\x20\x01(\tR\x08fileName\
    \x12\x16\n\x06buffer\x18\x03\x20\x01(\x0cR\x06buffer\"\x20\n\x0eUploadRe\
    sponse\x12\x0e\n\x02ok\x18\x01\x20\x01(\x08R\x02ok\"\x8d\x01\n\rImportRe\
    quest\x12?\n\x06header\x18\x01\x20\x01(\x0b2'.com.tencent.easygraph.prot\
    o.AuthHeaderR\x06header\x12;\n\x04task\x18\x02\x20\x01(\x0b2'.com.tencen\
    t.easygraph.proto.TaskConfigR\x04task\":\n\x0eImportResponse\x12\x0e\n\
    \x02ok\x18\x01\x20\x01(\x08R\x02ok\x12\x18\n\x07message\x18\x02\x20\x01(\
    \tR\x07message\"R\n\x0fShowTaskRequest\x12?\n\x06header\x18\x01\x20\x01(\
    \x0b2'.com.tencent.easygraph.proto.AuthHeaderR\x06header\"H\n\x10ShowTas\
    kResponse\x12\x1a\n\x08progress\x18\x01\x20\x01(\x01R\x08progress\x12\
    \x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"L\n\tLsRequest\x12?\n\
    \x06header\x18\x01\x20\x01(\x0b2'.com.tencent.easygraph.proto.AuthHeader\
    R\x06header\"\"\n\nLsResponse\x12\x14\n\x05files\x18\x01\x20\x03(\tR\x05\
    files\"`\n\tRmRequest\x12?\n\x06header\x18\x01\x20\x01(\x0b2'.com.tencen\
    t.easygraph.proto.AuthHeaderR\x06header\x12\x12\n\x04file\x18\x02\x20\
    \x01(\tR\x04file\"6\n\nRmResponse\x12\x0e\n\x02ok\x18\x01\x20\x01(\x08R\
    \x02ok\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message2\xf5\x03\n\
    \x10ImportRpcService\x12g\n\x08doUpload\x12*.com.tencent.easygraph.proto\
    .UploadRequest\x1a+.com.tencent.easygraph.proto.UploadResponse(\x010\x01\
    \x12c\n\x08doImport\x12*.com.tencent.easygraph.proto.ImportRequest\x1a+.\
    com.tencent.easygraph.proto.ImportResponse\x12e\n\x04show\x12,.com.tence\
    nt.easygraph.proto.ShowTaskRequest\x1a-.com.tencent.easygraph.proto.Show\
    TaskResponse0\x01\x12U\n\x02ls\x12&.com.tencent.easygraph.proto.LsReques\
    t\x1a'.com.tencent.easygraph.proto.LsResponse\x12U\n\x02rm\x12&.com.tenc\
    ent.easygraph.proto.RmRequest\x1a'.com.tencent.easygraph.proto.RmRespons\
    eB\x02P\x01J\xca\x0f\n\x06\x12\x04\0\0F\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\0$\n\t\n\x02\x03\0\x12\x03\x03\0\x14\n\
    \x08\n\x01\x08\x12\x03\x05\0\"\n\t\n\x02\x08\n\x12\x03\x05\0\"\n\n\n\x02\
    \x04\0\x12\x04\x07\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x12\n\x0b\
    \n\x04\x04\0\x02\0\x12\x03\x08\x02\x12\n\r\n\x05\x04\0\x02\0\x04\x12\x04\
    \x08\x02\x07\x13\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x08\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x08\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x02\x16\n\r\n\x05\x04\0\
    \x02\x01\x04\x12\x04\t\x02\x08\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \t\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\t\x11\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\t\x14\x15\n\n\n\x02\x04\x01\x12\x04\x0c\0\x10\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\r\x02\x18\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\r\x02\x0c\x17\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\r\x02\x0c\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\r\r\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x16\x17\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x0e\x02\x17\n\r\n\x05\x04\x01\x02\x01\x04\
    \x12\x04\x0e\x02\r\x18\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0e\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0e\t\x12\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x0e\x15\x16\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\
    \x0f\x02\x13\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x0f\x02\x0e\x17\n\x0c\
    \n\x05\x04\x01\x02\x02\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03\x0f\x08\x0e\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0f\
    \x11\x12\n\n\n\x02\x04\x02\x12\x04\x12\0\x14\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03\x12\x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x13\x02\x0e\n\r\n\
    \x05\x04\x02\x02\0\x04\x12\x04\x13\x02\x12\x18\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\x13\x02\x06\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x13\x07\t\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\x0c\r\n\n\n\x02\x04\x03\x12\
    \x04\x16\0\x19\x01\n\n\n\x03\x04\x03\x01\x12\x03\x16\x08\x15\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x03\x17\x02\x18\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\
    \x17\x02\x16\x17\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x17\x02\x0c\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03\x17\r\x13\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03\x17\x16\x17\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x18\x022\n\r\n\
    \x05\x04\x03\x02\x01\x04\x12\x04\x18\x02\x17\x18\n\x0c\n\x05\x04\x03\x02\
    \x01\x06\x12\x03\x18\x02(\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x18)-\
    \n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1801\n\n\n\x02\x04\x04\x12\x04\
    \x1b\0\x1e\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1b\x08\x16\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x03\x1c\x02\x0e\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\x1c\
    \x02\x1b\x18\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1c\x02\x06\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03\x1c\x07\t\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03\x1c\x0c\r\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1d\x02\x15\n\r\n\
    \x05\x04\x04\x02\x01\x04\x12\x04\x1d\x02\x1c\x0e\n\x0c\n\x05\x04\x04\x02\
    \x01\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1d\
    \t\x10\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1d\x13\x14\n\n\n\x02\x04\
    \x05\x12\x04\x20\0\"\x01\n\n\n\x03\x04\x05\x01\x12\x03\x20\x08\x17\n\x0b\
    \n\x04\x04\x05\x02\0\x12\x03!\x02\x18\n\r\n\x05\x04\x05\x02\0\x04\x12\
    \x04!\x02\x20\x19\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03!\x02\x0c\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03!\r\x13\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x03!\x16\x17\n\n\n\x02\x04\x06\x12\x04$\0'\x01\n\n\n\x03\x04\x06\x01\
    \x12\x03$\x08\x18\n\x0b\n\x04\x04\x06\x02\0\x12\x03%\x02\x16\n\r\n\x05\
    \x04\x06\x02\0\x04\x12\x04%\x02$\x1a\n\x0c\n\x05\x04\x06\x02\0\x05\x12\
    \x03%\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03%\t\x11\n\x0c\n\x05\
    \x04\x06\x02\0\x03\x12\x03%\x14\x15\n\x0b\n\x04\x04\x06\x02\x01\x12\x03&\
    \x02\x15\n\r\n\x05\x04\x06\x02\x01\x04\x12\x04&\x02%\x16\n\x0c\n\x05\x04\
    \x06\x02\x01\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\
    \x03&\t\x10\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03&\x13\x14\n\n\n\x02\
    \x04\x07\x12\x04)\0+\x01\n\n\n\x03\x04\x07\x01\x12\x03)\x08\x11\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x03*\x02\x18\n\r\n\x05\x04\x07\x02\0\x04\x12\x04*\
    \x02)\x13\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03*\x02\x0c\n\x0c\n\x05\x04\
    \x07\x02\0\x01\x12\x03*\r\x13\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03*\x16\
    \x17\n\n\n\x02\x04\x08\x12\x04-\0/\x01\n\n\n\x03\x04\x08\x01\x12\x03-\
    \x08\x12\n\x0b\n\x04\x04\x08\x02\0\x12\x03.\x02\x1c\n\x0c\n\x05\x04\x08\
    \x02\0\x04\x12\x03.\x02\n\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03.\x0b\x11\
    \n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03.\x12\x17\n\x0c\n\x05\x04\x08\x02\
    \0\x03\x12\x03.\x1a\x1b\n\n\n\x02\x04\t\x12\x041\04\x01\n\n\n\x03\x04\t\
    \x01\x12\x031\x08\x11\n\x0b\n\x04\x04\t\x02\0\x12\x032\x02\x18\n\r\n\x05\
    \x04\t\x02\0\x04\x12\x042\x021\x13\n\x0c\n\x05\x04\t\x02\0\x06\x12\x032\
    \x02\x0c\n\x0c\n\x05\x04\t\x02\0\x01\x12\x032\r\x13\n\x0c\n\x05\x04\t\
    \x02\0\x03\x12\x032\x16\x17\n\x0b\n\x04\x04\t\x02\x01\x12\x033\x02\x12\n\
    \r\n\x05\x04\t\x02\x01\x04\x12\x043\x022\x18\n\x0c\n\x05\x04\t\x02\x01\
    \x05\x12\x033\x02\x08\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x033\t\r\n\x0c\n\
    \x05\x04\t\x02\x01\x03\x12\x033\x10\x11\n\n\n\x02\x04\n\x12\x046\09\x01\
    \n\n\n\x03\x04\n\x01\x12\x036\x08\x12\n\x0b\n\x04\x04\n\x02\0\x12\x037\
    \x02\x0e\n\r\n\x05\x04\n\x02\0\x04\x12\x047\x026\x14\n\x0c\n\x05\x04\n\
    \x02\0\x05\x12\x037\x02\x06\n\x0c\n\x05\x04\n\x02\0\x01\x12\x037\x07\t\n\
    \x0c\n\x05\x04\n\x02\0\x03\x12\x037\x0c\r\n\x0b\n\x04\x04\n\x02\x01\x12\
    \x038\x02\x15\n\r\n\x05\x04\n\x02\x01\x04\x12\x048\x027\x0e\n\x0c\n\x05\
    \x04\n\x02\x01\x05\x12\x038\x02\x08\n\x0c\n\x05\x04\n\x02\x01\x01\x12\
    \x038\t\x10\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x038\x13\x14\n\n\n\x02\x06\
    \0\x12\x04;\0F\x01\n\n\n\x03\x06\0\x01\x12\x03;\x08\x18\n\x0b\n\x04\x06\
    \0\x02\0\x12\x03=\x02E\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03=\x06\x0e\n\
    \x0c\n\x05\x06\0\x02\0\x05\x12\x03=\x0f\x15\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03=\x16#\n\x0c\n\x05\x06\0\x02\0\x06\x12\x03=.4\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03=5C\n\x0b\n\x04\x06\0\x02\x01\x12\x03?\x027\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03?\x06\x0e\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03?\x0f\x1c\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03?'5\n\x0b\n\x04\
    \x06\0\x02\x02\x12\x03A\x02>\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03A\x06\
    \n\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03A\x0b\x1a\n\x0c\n\x05\x06\0\x02\
    \x02\x06\x12\x03A%+\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03A,<\n\x0b\n\x04\
    \x06\0\x02\x03\x12\x03C\x02)\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03C\x06\
    \x08\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03C\t\x12\n\x0c\n\x05\x06\0\x02\
    \x03\x03\x12\x03C\x1d'\n\x0b\n\x04\x06\0\x02\x04\x12\x03E\x02)\n\x0c\n\
    \x05\x06\0\x02\x04\x01\x12\x03E\x06\x08\n\x0c\n\x05\x06\0\x02\x04\x02\
    \x12\x03E\t\x12\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03E\x1d'b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::load::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(AuthHeader::generated_message_descriptor_data());
            messages.push(UploadRequest::generated_message_descriptor_data());
            messages.push(UploadResponse::generated_message_descriptor_data());
            messages.push(ImportRequest::generated_message_descriptor_data());
            messages.push(ImportResponse::generated_message_descriptor_data());
            messages.push(ShowTaskRequest::generated_message_descriptor_data());
            messages.push(ShowTaskResponse::generated_message_descriptor_data());
            messages.push(LsRequest::generated_message_descriptor_data());
            messages.push(LsResponse::generated_message_descriptor_data());
            messages.push(RmRequest::generated_message_descriptor_data());
            messages.push(RmResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
