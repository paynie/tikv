// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `graph_distribute.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.graph.distribute.proto.GetEdgeRequest)
pub struct GetEdgeRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.graph.distribute.proto.GetEdgeRequest.vertex)
    pub vertex: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.graph.distribute.proto.GetEdgeRequest.direction)
    pub direction: ::std::string::String,
    // @@protoc_insertion_point(field:com.tencent.easygraph.graph.distribute.proto.GetEdgeRequest.labels)
    pub labels: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.graph.distribute.proto.GetEdgeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetEdgeRequest {
    fn default() -> &'a GetEdgeRequest {
        <GetEdgeRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetEdgeRequest {
    pub fn new() -> GetEdgeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertex",
            |m: &GetEdgeRequest| { &m.vertex },
            |m: &mut GetEdgeRequest| { &mut m.vertex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "direction",
            |m: &GetEdgeRequest| { &m.direction },
            |m: &mut GetEdgeRequest| { &mut m.direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "labels",
            |m: &GetEdgeRequest| { &m.labels },
            |m: &mut GetEdgeRequest| { &mut m.labels },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetEdgeRequest>(
            "GetEdgeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetEdgeRequest {
    const NAME: &'static str = "GetEdgeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.vertex = is.read_bytes()?;
                },
                18 => {
                    self.direction = is.read_string()?;
                },
                26 => {
                    self.labels.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.vertex.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.vertex);
        }
        if !self.direction.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.direction);
        }
        for value in &self.labels {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.vertex.is_empty() {
            os.write_bytes(1, &self.vertex)?;
        }
        if !self.direction.is_empty() {
            os.write_string(2, &self.direction)?;
        }
        for v in &self.labels {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetEdgeRequest {
        GetEdgeRequest::new()
    }

    fn clear(&mut self) {
        self.vertex.clear();
        self.direction.clear();
        self.labels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetEdgeRequest {
        static instance: GetEdgeRequest = GetEdgeRequest {
            vertex: ::std::vec::Vec::new(),
            direction: ::std::string::String::new(),
            labels: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetEdgeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetEdgeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetEdgeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEdgeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.graph.distribute.proto.GetEdgeResponse)
pub struct GetEdgeResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.graph.distribute.proto.GetEdgeResponse.edges)
    pub edges: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.graph.distribute.proto.GetEdgeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetEdgeResponse {
    fn default() -> &'a GetEdgeResponse {
        <GetEdgeResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetEdgeResponse {
    pub fn new() -> GetEdgeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "edges",
            |m: &GetEdgeResponse| { &m.edges },
            |m: &mut GetEdgeResponse| { &mut m.edges },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetEdgeResponse>(
            "GetEdgeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetEdgeResponse {
    const NAME: &'static str = "GetEdgeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.edges = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.edges.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.edges);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.edges.is_empty() {
            os.write_bytes(1, &self.edges)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetEdgeResponse {
        GetEdgeResponse::new()
    }

    fn clear(&mut self) {
        self.edges.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetEdgeResponse {
        static instance: GetEdgeResponse = GetEdgeResponse {
            edges: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetEdgeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetEdgeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetEdgeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEdgeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.graph.distribute.proto.AddEdgeRequest)
pub struct AddEdgeRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.graph.distribute.proto.AddEdgeRequest.edges)
    pub edges: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.graph.distribute.proto.AddEdgeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddEdgeRequest {
    fn default() -> &'a AddEdgeRequest {
        <AddEdgeRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddEdgeRequest {
    pub fn new() -> AddEdgeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "edges",
            |m: &AddEdgeRequest| { &m.edges },
            |m: &mut AddEdgeRequest| { &mut m.edges },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddEdgeRequest>(
            "AddEdgeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddEdgeRequest {
    const NAME: &'static str = "AddEdgeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.edges = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.edges.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.edges);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.edges.is_empty() {
            os.write_bytes(1, &self.edges)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddEdgeRequest {
        AddEdgeRequest::new()
    }

    fn clear(&mut self) {
        self.edges.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddEdgeRequest {
        static instance: AddEdgeRequest = AddEdgeRequest {
            edges: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddEdgeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddEdgeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddEdgeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddEdgeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.graph.distribute.proto.AddEdgeResponse)
pub struct AddEdgeResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.graph.distribute.proto.AddEdgeResponse.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.graph.distribute.proto.AddEdgeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AddEdgeResponse {
    fn default() -> &'a AddEdgeResponse {
        <AddEdgeResponse as ::protobuf::Message>::default_instance()
    }
}

impl AddEdgeResponse {
    pub fn new() -> AddEdgeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &AddEdgeResponse| { &m.success },
            |m: &mut AddEdgeResponse| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AddEdgeResponse>(
            "AddEdgeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AddEdgeResponse {
    const NAME: &'static str = "AddEdgeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AddEdgeResponse {
        AddEdgeResponse::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AddEdgeResponse {
        static instance: AddEdgeResponse = AddEdgeResponse {
            success: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AddEdgeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AddEdgeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AddEdgeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddEdgeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.graph.distribute.proto.DropEdgeRequest)
pub struct DropEdgeRequest {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.graph.distribute.proto.DropEdgeRequest.edges)
    pub edges: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.graph.distribute.proto.DropEdgeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DropEdgeRequest {
    fn default() -> &'a DropEdgeRequest {
        <DropEdgeRequest as ::protobuf::Message>::default_instance()
    }
}

impl DropEdgeRequest {
    pub fn new() -> DropEdgeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "edges",
            |m: &DropEdgeRequest| { &m.edges },
            |m: &mut DropEdgeRequest| { &mut m.edges },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DropEdgeRequest>(
            "DropEdgeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DropEdgeRequest {
    const NAME: &'static str = "DropEdgeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.edges = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.edges.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.edges);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.edges.is_empty() {
            os.write_bytes(1, &self.edges)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DropEdgeRequest {
        DropEdgeRequest::new()
    }

    fn clear(&mut self) {
        self.edges.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DropEdgeRequest {
        static instance: DropEdgeRequest = DropEdgeRequest {
            edges: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DropEdgeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DropEdgeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DropEdgeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropEdgeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.graph.distribute.proto.DropEdgeResponse)
pub struct DropEdgeResponse {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.graph.distribute.proto.DropEdgeResponse.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.graph.distribute.proto.DropEdgeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DropEdgeResponse {
    fn default() -> &'a DropEdgeResponse {
        <DropEdgeResponse as ::protobuf::Message>::default_instance()
    }
}

impl DropEdgeResponse {
    pub fn new() -> DropEdgeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &DropEdgeResponse| { &m.success },
            |m: &mut DropEdgeResponse| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DropEdgeResponse>(
            "DropEdgeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DropEdgeResponse {
    const NAME: &'static str = "DropEdgeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DropEdgeResponse {
        DropEdgeResponse::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DropEdgeResponse {
        static instance: DropEdgeResponse = DropEdgeResponse {
            success: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DropEdgeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DropEdgeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DropEdgeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DropEdgeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16graph_distribute.proto\x12,com.tencent.easygraph.graph.distribute.\
    proto\"^\n\x0eGetEdgeRequest\x12\x16\n\x06vertex\x18\x01\x20\x01(\x0cR\
    \x06vertex\x12\x1c\n\tdirection\x18\x02\x20\x01(\tR\tdirection\x12\x16\n\
    \x06labels\x18\x03\x20\x03(\tR\x06labels\"'\n\x0fGetEdgeResponse\x12\x14\
    \n\x05edges\x18\x01\x20\x01(\x0cR\x05edges\"&\n\x0eAddEdgeRequest\x12\
    \x14\n\x05edges\x18\x01\x20\x01(\x0cR\x05edges\"+\n\x0fAddEdgeResponse\
    \x12\x18\n\x07success\x18\x01\x20\x01(\x08R\x07success\"'\n\x0fDropEdgeR\
    equest\x12\x14\n\x05edges\x18\x01\x20\x01(\x0cR\x05edges\",\n\x10DropEdg\
    eResponse\x12\x18\n\x07success\x18\x01\x20\x01(\x08R\x07success2\xb5\x03\
    \n\x12RemoteGraphService\x12\x87\x01\n\x08getEdges\x12<.com.tencent.easy\
    graph.graph.distribute.proto.GetEdgeRequest\x1a=.com.tencent.easygraph.g\
    raph.distribute.proto.GetEdgeResponse\x12\x87\x01\n\x08addEdges\x12<.com\
    .tencent.easygraph.graph.distribute.proto.AddEdgeRequest\x1a=.com.tencen\
    t.easygraph.graph.distribute.proto.AddEdgeResponse\x12\x8a\x01\n\tdropEd\
    ges\x12=.com.tencent.easygraph.graph.distribute.proto.DropEdgeRequest\
    \x1a>.com.tencent.easygraph.graph.distribute.proto.DropEdgeResponseB\x02\
    P\x01J\xad\x07\n\x06\x12\x04\0\0'\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\05\n\x08\n\x01\x08\x12\x03\x04\0\"\n\t\n\x02\
    \x08\n\x12\x03\x04\0\"\n\n\n\x02\x04\0\x12\x04\x06\0\n\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x06\x08\x16\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x02\x13\n\
    \r\n\x05\x04\0\x02\0\x04\x12\x04\x07\x02\x06\x17\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x07\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x08\x0e\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x07\x11\x12\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x08\x02\x17\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x08\x02\x07\
    \x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x08\t\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\
    \x15\x16\n\x0b\n\x04\x04\0\x02\x02\x12\x03\t\x02\x1d\n\x0c\n\x05\x04\0\
    \x02\x02\x04\x12\x03\t\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\t\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\x12\x18\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\t\x1b\x1c\n\n\n\x02\x04\x01\x12\x04\x0c\0\x0e\x01\n\
    \n\n\x03\x04\x01\x01\x12\x03\x0c\x08\x17\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\r\x02\x12\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\r\x02\x0c\x18\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\r\x08\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x10\x11\n\n\n\
    \x02\x04\x02\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x02\x01\x12\x03\x10\x08\
    \x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x11\x02\x12\n\r\n\x05\x04\x02\x02\
    \0\x04\x12\x04\x11\x02\x10\x17\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x11\
    \x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x11\x08\r\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x11\x10\x11\n\n\n\x02\x04\x03\x12\x04\x14\0\x16\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03\x14\x08\x17\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\x15\x02\x13\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x15\x02\x14\x18\
    \n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x15\x02\x06\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03\x15\x07\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x15\
    \x11\x12\n\n\n\x02\x04\x04\x12\x04\x18\0\x1a\x01\n\n\n\x03\x04\x04\x01\
    \x12\x03\x18\x08\x17\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x19\x02\x12\n\r\n\
    \x05\x04\x04\x02\0\x04\x12\x04\x19\x02\x18\x18\n\x0c\n\x05\x04\x04\x02\0\
    \x05\x12\x03\x19\x02\x07\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x19\x08\r\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x19\x10\x11\n\n\n\x02\x04\x05\x12\
    \x04\x1c\0\x1e\x01\n\n\n\x03\x04\x05\x01\x12\x03\x1c\x08\x18\n\x0b\n\x04\
    \x04\x05\x02\0\x12\x03\x1d\x02\x13\n\r\n\x05\x04\x05\x02\0\x04\x12\x04\
    \x1d\x02\x1c\x19\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03\x1d\x02\x06\n\x0c\
    \n\x05\x04\x05\x02\0\x01\x12\x03\x1d\x07\x0e\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03\x1d\x11\x12\n\n\n\x02\x06\0\x12\x04\x20\0'\x01\n\n\n\x03\
    \x06\0\x01\x12\x03\x20\x08\x1a\n\x0b\n\x04\x06\0\x02\0\x12\x03\"\x029\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\"\x06\x0e\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03\"\x0f\x1d\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\"(7\n\x0b\n\x04\
    \x06\0\x02\x01\x12\x03$\x029\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03$\x06\
    \x0e\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03$\x0f\x1d\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03$(7\n\x0b\n\x04\x06\0\x02\x02\x12\x03&\x02<\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03&\x06\x0f\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03&\x10\x1f\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03&*:b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(GetEdgeRequest::generated_message_descriptor_data());
            messages.push(GetEdgeResponse::generated_message_descriptor_data());
            messages.push(AddEdgeRequest::generated_message_descriptor_data());
            messages.push(AddEdgeResponse::generated_message_descriptor_data());
            messages.push(DropEdgeRequest::generated_message_descriptor_data());
            messages.push(DropEdgeResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
