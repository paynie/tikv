// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `data_model.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.Property)
pub struct Property {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.Property.prop_id)
    pub prop_id: i32,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.Property.prop_value)
    pub prop_value: ::protobuf::MessageField<super::common::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.Property.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Property {
    fn default() -> &'a Property {
        <Property as ::protobuf::Message>::default_instance()
    }
}

impl Property {
    pub fn new() -> Property {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prop_id",
            |m: &Property| { &m.prop_id },
            |m: &mut Property| { &mut m.prop_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Value>(
            "prop_value",
            |m: &Property| { &m.prop_value },
            |m: &mut Property| { &mut m.prop_value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Property>(
            "Property",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Property {
    const NAME: &'static str = "Property";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.prop_id = is.read_int32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.prop_value)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.prop_id != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.prop_id);
        }
        if let Some(v) = self.prop_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.prop_id != 0 {
            os.write_int32(1, self.prop_id)?;
        }
        if let Some(v) = self.prop_value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Property {
        Property::new()
    }

    fn clear(&mut self) {
        self.prop_id = 0;
        self.prop_value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Property {
        static instance: Property = Property {
            prop_id: 0,
            prop_value: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Property {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Property").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Property {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Property {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.VertexId)
pub struct VertexId {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.VertexId.vid)
    pub vid: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.VertexId.label_id)
    pub label_id: i32,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.VertexId.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VertexId {
    fn default() -> &'a VertexId {
        <VertexId as ::protobuf::Message>::default_instance()
    }
}

impl VertexId {
    pub fn new() -> VertexId {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vid",
            |m: &VertexId| { &m.vid },
            |m: &mut VertexId| { &mut m.vid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label_id",
            |m: &VertexId| { &m.label_id },
            |m: &mut VertexId| { &mut m.label_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VertexId>(
            "VertexId",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VertexId {
    const NAME: &'static str = "VertexId";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.vid = is.read_bytes()?;
                },
                16 => {
                    self.label_id = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.vid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.vid);
        }
        if self.label_id != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.label_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.vid.is_empty() {
            os.write_bytes(1, &self.vid)?;
        }
        if self.label_id != 0 {
            os.write_int32(2, self.label_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VertexId {
        VertexId::new()
    }

    fn clear(&mut self) {
        self.vid.clear();
        self.label_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VertexId {
        static instance: VertexId = VertexId {
            vid: ::std::vec::Vec::new(),
            label_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VertexId {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VertexId").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VertexId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VertexId {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.Vertex)
pub struct Vertex {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.Vertex.vertex_id)
    pub vertex_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.Vertex.label_id)
    pub label_id: i32,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.Vertex.property)
    pub property: ::std::vec::Vec<Property>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.Vertex.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vertex {
    fn default() -> &'a Vertex {
        <Vertex as ::protobuf::Message>::default_instance()
    }
}

impl Vertex {
    pub fn new() -> Vertex {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vertex_id",
            |m: &Vertex| { &m.vertex_id },
            |m: &mut Vertex| { &mut m.vertex_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label_id",
            |m: &Vertex| { &m.label_id },
            |m: &mut Vertex| { &mut m.label_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "property",
            |m: &Vertex| { &m.property },
            |m: &mut Vertex| { &mut m.property },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vertex>(
            "Vertex",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vertex {
    const NAME: &'static str = "Vertex";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.vertex_id = is.read_bytes()?;
                },
                16 => {
                    self.label_id = is.read_int32()?;
                },
                26 => {
                    self.property.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.vertex_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.vertex_id);
        }
        if self.label_id != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.label_id);
        }
        for value in &self.property {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.vertex_id.is_empty() {
            os.write_bytes(1, &self.vertex_id)?;
        }
        if self.label_id != 0 {
            os.write_int32(2, self.label_id)?;
        }
        for v in &self.property {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vertex {
        Vertex::new()
    }

    fn clear(&mut self) {
        self.vertex_id.clear();
        self.label_id = 0;
        self.property.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vertex {
        static instance: Vertex = Vertex {
            vertex_id: ::std::vec::Vec::new(),
            label_id: 0,
            property: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vertex {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vertex").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vertex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vertex {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.EdgeValue)
pub struct EdgeValue {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeValue.src_id)
    pub src_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeValue.dst_id)
    pub dst_id: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeValue.property)
    pub property: ::std::vec::Vec<super::common::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.EdgeValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EdgeValue {
    fn default() -> &'a EdgeValue {
        <EdgeValue as ::protobuf::Message>::default_instance()
    }
}

impl EdgeValue {
    pub fn new() -> EdgeValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "src_id",
            |m: &EdgeValue| { &m.src_id },
            |m: &mut EdgeValue| { &mut m.src_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dst_id",
            |m: &EdgeValue| { &m.dst_id },
            |m: &mut EdgeValue| { &mut m.dst_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "property",
            |m: &EdgeValue| { &m.property },
            |m: &mut EdgeValue| { &mut m.property },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EdgeValue>(
            "EdgeValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EdgeValue {
    const NAME: &'static str = "EdgeValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.src_id = is.read_bytes()?;
                },
                18 => {
                    self.dst_id.push(is.read_bytes()?);
                },
                26 => {
                    self.property.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.src_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.src_id);
        }
        for value in &self.dst_id {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.property {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.src_id.is_empty() {
            os.write_bytes(1, &self.src_id)?;
        }
        for v in &self.dst_id {
            os.write_bytes(2, &v)?;
        };
        for v in &self.property {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EdgeValue {
        EdgeValue::new()
    }

    fn clear(&mut self) {
        self.src_id.clear();
        self.dst_id.clear();
        self.property.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EdgeValue {
        static instance: EdgeValue = EdgeValue {
            src_id: ::std::vec::Vec::new(),
            dst_id: ::std::vec::Vec::new(),
            property: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EdgeValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EdgeValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EdgeValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EdgeValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.OneEdgeValue)
pub struct OneEdgeValue {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.OneEdgeValue.dst_id)
    pub dst_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.OneEdgeValue.property)
    pub property: ::std::vec::Vec<Property>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.OneEdgeValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OneEdgeValue {
    fn default() -> &'a OneEdgeValue {
        <OneEdgeValue as ::protobuf::Message>::default_instance()
    }
}

impl OneEdgeValue {
    pub fn new() -> OneEdgeValue {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dst_id",
            |m: &OneEdgeValue| { &m.dst_id },
            |m: &mut OneEdgeValue| { &mut m.dst_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "property",
            |m: &OneEdgeValue| { &m.property },
            |m: &mut OneEdgeValue| { &mut m.property },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OneEdgeValue>(
            "OneEdgeValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OneEdgeValue {
    const NAME: &'static str = "OneEdgeValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.dst_id = is.read_bytes()?;
                },
                18 => {
                    self.property.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.dst_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dst_id);
        }
        for value in &self.property {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.dst_id.is_empty() {
            os.write_bytes(1, &self.dst_id)?;
        }
        for v in &self.property {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OneEdgeValue {
        OneEdgeValue::new()
    }

    fn clear(&mut self) {
        self.dst_id.clear();
        self.property.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OneEdgeValue {
        static instance: OneEdgeValue = OneEdgeValue {
            dst_id: ::std::vec::Vec::new(),
            property: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OneEdgeValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OneEdgeValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OneEdgeValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OneEdgeValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.EdgeKey)
pub struct EdgeKey {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeKey.src_id)
    pub src_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeKey.direction)
    pub direction: i32,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeKey.label_id)
    pub label_id: i32,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.EdgeKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EdgeKey {
    fn default() -> &'a EdgeKey {
        <EdgeKey as ::protobuf::Message>::default_instance()
    }
}

impl EdgeKey {
    pub fn new() -> EdgeKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "src_id",
            |m: &EdgeKey| { &m.src_id },
            |m: &mut EdgeKey| { &mut m.src_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "direction",
            |m: &EdgeKey| { &m.direction },
            |m: &mut EdgeKey| { &mut m.direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label_id",
            |m: &EdgeKey| { &m.label_id },
            |m: &mut EdgeKey| { &mut m.label_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EdgeKey>(
            "EdgeKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EdgeKey {
    const NAME: &'static str = "EdgeKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.src_id = is.read_bytes()?;
                },
                16 => {
                    self.direction = is.read_int32()?;
                },
                24 => {
                    self.label_id = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.src_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.src_id);
        }
        if self.direction != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.direction);
        }
        if self.label_id != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.label_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.src_id.is_empty() {
            os.write_bytes(1, &self.src_id)?;
        }
        if self.direction != 0 {
            os.write_int32(2, self.direction)?;
        }
        if self.label_id != 0 {
            os.write_int32(3, self.label_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EdgeKey {
        EdgeKey::new()
    }

    fn clear(&mut self) {
        self.src_id.clear();
        self.direction = 0;
        self.label_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EdgeKey {
        static instance: EdgeKey = EdgeKey {
            src_id: ::std::vec::Vec::new(),
            direction: 0,
            label_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EdgeKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EdgeKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EdgeKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EdgeKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.PartEdgeKey)
pub struct PartEdgeKey {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.PartEdgeKey.src_id)
    pub src_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.PartEdgeKey.direction)
    pub direction: i32,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.PartEdgeKey.label_id)
    pub label_id: i32,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.PartEdgeKey.partition_id)
    pub partition_id: i32,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.PartEdgeKey.version)
    pub version: i32,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.PartEdgeKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PartEdgeKey {
    fn default() -> &'a PartEdgeKey {
        <PartEdgeKey as ::protobuf::Message>::default_instance()
    }
}

impl PartEdgeKey {
    pub fn new() -> PartEdgeKey {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "src_id",
            |m: &PartEdgeKey| { &m.src_id },
            |m: &mut PartEdgeKey| { &mut m.src_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "direction",
            |m: &PartEdgeKey| { &m.direction },
            |m: &mut PartEdgeKey| { &mut m.direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "label_id",
            |m: &PartEdgeKey| { &m.label_id },
            |m: &mut PartEdgeKey| { &mut m.label_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "partition_id",
            |m: &PartEdgeKey| { &m.partition_id },
            |m: &mut PartEdgeKey| { &mut m.partition_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &PartEdgeKey| { &m.version },
            |m: &mut PartEdgeKey| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PartEdgeKey>(
            "PartEdgeKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PartEdgeKey {
    const NAME: &'static str = "PartEdgeKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.src_id = is.read_bytes()?;
                },
                16 => {
                    self.direction = is.read_int32()?;
                },
                24 => {
                    self.label_id = is.read_int32()?;
                },
                32 => {
                    self.partition_id = is.read_int32()?;
                },
                40 => {
                    self.version = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.src_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.src_id);
        }
        if self.direction != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.direction);
        }
        if self.label_id != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.label_id);
        }
        if self.partition_id != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.partition_id);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.src_id.is_empty() {
            os.write_bytes(1, &self.src_id)?;
        }
        if self.direction != 0 {
            os.write_int32(2, self.direction)?;
        }
        if self.label_id != 0 {
            os.write_int32(3, self.label_id)?;
        }
        if self.partition_id != 0 {
            os.write_int32(4, self.partition_id)?;
        }
        if self.version != 0 {
            os.write_int32(5, self.version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PartEdgeKey {
        PartEdgeKey::new()
    }

    fn clear(&mut self) {
        self.src_id.clear();
        self.direction = 0;
        self.label_id = 0;
        self.partition_id = 0;
        self.version = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PartEdgeKey {
        static instance: PartEdgeKey = PartEdgeKey {
            src_id: ::std::vec::Vec::new(),
            direction: 0,
            label_id: 0,
            partition_id: 0,
            version: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PartEdgeKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PartEdgeKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PartEdgeKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartEdgeKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.EdgeItem)
pub struct EdgeItem {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeItem.dst_id)
    pub dst_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeItem.property)
    pub property: ::std::vec::Vec<Property>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.EdgeItem.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EdgeItem {
    fn default() -> &'a EdgeItem {
        <EdgeItem as ::protobuf::Message>::default_instance()
    }
}

impl EdgeItem {
    pub fn new() -> EdgeItem {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dst_id",
            |m: &EdgeItem| { &m.dst_id },
            |m: &mut EdgeItem| { &mut m.dst_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "property",
            |m: &EdgeItem| { &m.property },
            |m: &mut EdgeItem| { &mut m.property },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EdgeItem>(
            "EdgeItem",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EdgeItem {
    const NAME: &'static str = "EdgeItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.dst_id = is.read_bytes()?;
                },
                18 => {
                    self.property.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.dst_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dst_id);
        }
        for value in &self.property {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.dst_id.is_empty() {
            os.write_bytes(1, &self.dst_id)?;
        }
        for v in &self.property {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EdgeItem {
        EdgeItem::new()
    }

    fn clear(&mut self) {
        self.dst_id.clear();
        self.property.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EdgeItem {
        static instance: EdgeItem = EdgeItem {
            dst_id: ::std::vec::Vec::new(),
            property: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EdgeItem {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EdgeItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EdgeItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EdgeItem {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.EdgeList)
pub struct EdgeList {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeList.src_id)
    pub src_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeList.edge)
    pub edge: ::std::vec::Vec<EdgeItem>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeList.partition_num)
    pub partition_num: i32,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.EdgeList.version)
    pub version: i32,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.EdgeList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EdgeList {
    fn default() -> &'a EdgeList {
        <EdgeList as ::protobuf::Message>::default_instance()
    }
}

impl EdgeList {
    pub fn new() -> EdgeList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "src_id",
            |m: &EdgeList| { &m.src_id },
            |m: &mut EdgeList| { &mut m.src_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "edge",
            |m: &EdgeList| { &m.edge },
            |m: &mut EdgeList| { &mut m.edge },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "partition_num",
            |m: &EdgeList| { &m.partition_num },
            |m: &mut EdgeList| { &mut m.partition_num },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &EdgeList| { &m.version },
            |m: &mut EdgeList| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EdgeList>(
            "EdgeList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EdgeList {
    const NAME: &'static str = "EdgeList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.src_id = is.read_bytes()?;
                },
                18 => {
                    self.edge.push(is.read_message()?);
                },
                24 => {
                    self.partition_num = is.read_int32()?;
                },
                32 => {
                    self.version = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.src_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.src_id);
        }
        for value in &self.edge {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.partition_num != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.partition_num);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.src_id.is_empty() {
            os.write_bytes(1, &self.src_id)?;
        }
        for v in &self.edge {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if self.partition_num != 0 {
            os.write_int32(3, self.partition_num)?;
        }
        if self.version != 0 {
            os.write_int32(4, self.version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EdgeList {
        EdgeList::new()
    }

    fn clear(&mut self) {
        self.src_id.clear();
        self.edge.clear();
        self.partition_num = 0;
        self.version = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EdgeList {
        static instance: EdgeList = EdgeList {
            src_id: ::std::vec::Vec::new(),
            edge: ::std::vec::Vec::new(),
            partition_num: 0,
            version: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EdgeList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EdgeList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EdgeList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EdgeList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:com.tencent.easygraph.model.PartEdgeList)
pub struct PartEdgeList {
    // message fields
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.PartEdgeList.src_id)
    pub src_id: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:com.tencent.easygraph.model.PartEdgeList.edge)
    pub edge: ::std::vec::Vec<EdgeItem>,
    // special fields
    // @@protoc_insertion_point(special_field:com.tencent.easygraph.model.PartEdgeList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PartEdgeList {
    fn default() -> &'a PartEdgeList {
        <PartEdgeList as ::protobuf::Message>::default_instance()
    }
}

impl PartEdgeList {
    pub fn new() -> PartEdgeList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "src_id",
            |m: &PartEdgeList| { &m.src_id },
            |m: &mut PartEdgeList| { &mut m.src_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "edge",
            |m: &PartEdgeList| { &m.edge },
            |m: &mut PartEdgeList| { &mut m.edge },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PartEdgeList>(
            "PartEdgeList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PartEdgeList {
    const NAME: &'static str = "PartEdgeList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.src_id = is.read_bytes()?;
                },
                18 => {
                    self.edge.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.src_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.src_id);
        }
        for value in &self.edge {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.src_id.is_empty() {
            os.write_bytes(1, &self.src_id)?;
        }
        for v in &self.edge {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PartEdgeList {
        PartEdgeList::new()
    }

    fn clear(&mut self) {
        self.src_id.clear();
        self.edge.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PartEdgeList {
        static instance: PartEdgeList = PartEdgeList {
            src_id: ::std::vec::Vec::new(),
            edge: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PartEdgeList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PartEdgeList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PartEdgeList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartEdgeList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10data_model.proto\x12\x1bcom.tencent.easygraph.model\x1a\x0ccommon.\
    proto\"f\n\x08Property\x12\x17\n\x07prop_id\x18\x01\x20\x01(\x05R\x06pro\
    pId\x12A\n\nprop_value\x18\x02\x20\x01(\x0b2\".com.tencent.easygraph.mod\
    el.ValueR\tpropValue\"7\n\x08VertexId\x12\x10\n\x03vid\x18\x01\x20\x01(\
    \x0cR\x03vid\x12\x19\n\x08label_id\x18\x02\x20\x01(\x05R\x07labelId\"\
    \x83\x01\n\x06Vertex\x12\x1b\n\tvertex_id\x18\x01\x20\x01(\x0cR\x08verte\
    xId\x12\x19\n\x08label_id\x18\x02\x20\x01(\x05R\x07labelId\x12A\n\x08pro\
    perty\x18\x03\x20\x03(\x0b2%.com.tencent.easygraph.model.PropertyR\x08pr\
    operty\"y\n\tEdgeValue\x12\x15\n\x06src_id\x18\x01\x20\x01(\x0cR\x05srcI\
    d\x12\x15\n\x06dst_id\x18\x02\x20\x03(\x0cR\x05dstId\x12>\n\x08property\
    \x18\x03\x20\x03(\x0b2\".com.tencent.easygraph.model.ValueR\x08property\
    \"h\n\x0cOneEdgeValue\x12\x15\n\x06dst_id\x18\x01\x20\x01(\x0cR\x05dstId\
    \x12A\n\x08property\x18\x02\x20\x03(\x0b2%.com.tencent.easygraph.model.P\
    ropertyR\x08property\"Y\n\x07EdgeKey\x12\x15\n\x06src_id\x18\x01\x20\x01\
    (\x0cR\x05srcId\x12\x1c\n\tdirection\x18\x02\x20\x01(\x05R\tdirection\
    \x12\x19\n\x08label_id\x18\x03\x20\x01(\x05R\x07labelId\"\x9a\x01\n\x0bP\
    artEdgeKey\x12\x15\n\x06src_id\x18\x01\x20\x01(\x0cR\x05srcId\x12\x1c\n\
    \tdirection\x18\x02\x20\x01(\x05R\tdirection\x12\x19\n\x08label_id\x18\
    \x03\x20\x01(\x05R\x07labelId\x12!\n\x0cpartition_id\x18\x04\x20\x01(\
    \x05R\x0bpartitionId\x12\x18\n\x07version\x18\x05\x20\x01(\x05R\x07versi\
    on\"d\n\x08EdgeItem\x12\x15\n\x06dst_id\x18\x01\x20\x01(\x0cR\x05dstId\
    \x12A\n\x08property\x18\x02\x20\x03(\x0b2%.com.tencent.easygraph.model.P\
    ropertyR\x08property\"\x9b\x01\n\x08EdgeList\x12\x15\n\x06src_id\x18\x01\
    \x20\x01(\x0cR\x05srcId\x129\n\x04edge\x18\x02\x20\x03(\x0b2%.com.tencen\
    t.easygraph.model.EdgeItemR\x04edge\x12#\n\rpartition_num\x18\x03\x20\
    \x01(\x05R\x0cpartitionNum\x12\x18\n\x07version\x18\x04\x20\x01(\x05R\
    \x07version\"`\n\x0cPartEdgeList\x12\x15\n\x06src_id\x18\x01\x20\x01(\
    \x0cR\x05srcId\x129\n\x04edge\x18\x02\x20\x03(\x0b2%.com.tencent.easygra\
    ph.model.EdgeItemR\x04edgeJ\xb8\x11\n\x06\x12\x04\0\0<\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x01\0\x16\n\x08\n\x01\x02\
    \x12\x03\x02\0$\n\n\n\x02\x04\0\x12\x04\x04\0\x07\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x04\x08\x10\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x02\x17\n\r\
    \n\x05\x04\0\x02\0\x04\x12\x04\x05\x02\x04\x12\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x05\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x08\x0f\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x15\x16\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x06\x02\x17\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x06\x02\x05\
    \x17\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x06\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x06\x08\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x06\x15\x16\n\n\n\x02\x04\x01\x12\x04\t\0\x0c\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\t\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x02\x15\n\r\n\x05\
    \x04\x01\x02\0\x04\x12\x04\n\x02\t\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\n\x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x08\x0b\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\n\x13\x14\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03\x0b\x02\x15\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x0b\x02\n\x15\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x0b\x08\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x0b\x13\x14\n\n\n\x02\x04\x02\x12\x04\x0e\0\x12\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x0e\x08\x0e\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0f\x02!\n\r\
    \n\x05\x04\x02\x02\0\x04\x12\x04\x0f\x02\x0e\x10\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0f\x08\
    \x11\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0f\x1f\x20\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x10\x02!\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x10\
    \x02\x0f!\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x10\x02\x07\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\x10\x08\x10\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x10\x1f\x20\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x11\x02!\n\
    \x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x11\x02\n\n\x0c\n\x05\x04\x02\x02\
    \x02\x06\x12\x03\x11\x0b\x13\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x11\
    \x14\x1c\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x11\x1f\x20\n\n\n\x02\
    \x04\x03\x12\x04\x14\0\x18\x01\n\n\n\x03\x04\x03\x01\x12\x03\x14\x08\x11\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x03\x15\x02\x1e\n\r\n\x05\x04\x03\x02\0\
    \x04\x12\x04\x15\x02\x14\x13\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x15\
    \x02\x07\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x15\x08\x0e\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x15\x1c\x1d\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03\x16\x02\x1e\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\x16\x02\n\n\x0c\
    \n\x05\x04\x03\x02\x01\x05\x12\x03\x16\x0b\x10\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03\x16\x11\x17\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x16\
    \x1c\x1d\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x17\x02\x1e\n\x0c\n\x05\x04\
    \x03\x02\x02\x04\x12\x03\x17\x02\n\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\
    \x03\x17\x0b\x10\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\x17\x11\x19\n\
    \x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x17\x1c\x1d\n\n\n\x02\x04\x04\x12\
    \x04\x1a\0\x1d\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1a\x08\x14\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03\x1b\x02!\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\x1b\
    \x02\x1a\x16\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1b\x02\x07\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03\x1b\x08\x0e\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03\x1b\x1f\x20\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1c\x02!\n\x0c\
    \n\x05\x04\x04\x02\x01\x04\x12\x03\x1c\x02\n\n\x0c\n\x05\x04\x04\x02\x01\
    \x06\x12\x03\x1c\x0b\x13\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1c\x14\
    \x1c\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1c\x1f\x20\n\n\n\x02\x04\
    \x05\x12\x04\x1f\0#\x01\n\n\n\x03\x04\x05\x01\x12\x03\x1f\x08\x0f\n\x0b\
    \n\x04\x04\x05\x02\0\x12\x03\x20\x02!\n\r\n\x05\x04\x05\x02\0\x04\x12\
    \x04\x20\x02\x1f\x11\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03\x20\x02\x07\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03\x20\x08\x0e\n\x0c\n\x05\x04\x05\x02\
    \0\x03\x12\x03\x20\x1f\x20\n\x0b\n\x04\x04\x05\x02\x01\x12\x03!\x02!\n\r\
    \n\x05\x04\x05\x02\x01\x04\x12\x04!\x02\x20!\n\x0c\n\x05\x04\x05\x02\x01\
    \x05\x12\x03!\x02\x07\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03!\x08\x11\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03!\x1f\x20\n\x0b\n\x04\x04\x05\x02\
    \x02\x12\x03\"\x02!\n\r\n\x05\x04\x05\x02\x02\x04\x12\x04\"\x02!!\n\x0c\
    \n\x05\x04\x05\x02\x02\x05\x12\x03\"\x02\x07\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x03\"\x08\x10\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03\"\x1f\x20\
    \n\n\n\x02\x04\x06\x12\x04%\0+\x01\n\n\n\x03\x04\x06\x01\x12\x03%\x08\
    \x13\n\x0b\n\x04\x04\x06\x02\0\x12\x03&\x02!\n\r\n\x05\x04\x06\x02\0\x04\
    \x12\x04&\x02%\x15\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03&\x02\x07\n\x0c\
    \n\x05\x04\x06\x02\0\x01\x12\x03&\x08\x0e\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03&\x1f\x20\n\x0b\n\x04\x04\x06\x02\x01\x12\x03'\x02!\n\r\n\x05\
    \x04\x06\x02\x01\x04\x12\x04'\x02&!\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\
    \x03'\x02\x07\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03'\x08\x11\n\x0c\n\
    \x05\x04\x06\x02\x01\x03\x12\x03'\x1f\x20\n\x0b\n\x04\x04\x06\x02\x02\
    \x12\x03(\x02!\n\r\n\x05\x04\x06\x02\x02\x04\x12\x04(\x02'!\n\x0c\n\x05\
    \x04\x06\x02\x02\x05\x12\x03(\x02\x07\n\x0c\n\x05\x04\x06\x02\x02\x01\
    \x12\x03(\x08\x10\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03(\x1f\x20\n\x0b\
    \n\x04\x04\x06\x02\x03\x12\x03)\x02!\n\r\n\x05\x04\x06\x02\x03\x04\x12\
    \x04)\x02(!\n\x0c\n\x05\x04\x06\x02\x03\x05\x12\x03)\x02\x07\n\x0c\n\x05\
    \x04\x06\x02\x03\x01\x12\x03)\x08\x14\n\x0c\n\x05\x04\x06\x02\x03\x03\
    \x12\x03)\x1f\x20\n\x0b\n\x04\x04\x06\x02\x04\x12\x03*\x02!\n\r\n\x05\
    \x04\x06\x02\x04\x04\x12\x04*\x02)!\n\x0c\n\x05\x04\x06\x02\x04\x05\x12\
    \x03*\x02\x07\n\x0c\n\x05\x04\x06\x02\x04\x01\x12\x03*\x08\x0f\n\x0c\n\
    \x05\x04\x06\x02\x04\x03\x12\x03*\x1f\x20\n\n\n\x02\x04\x07\x12\x04-\00\
    \x01\n\n\n\x03\x04\x07\x01\x12\x03-\x08\x10\n\x0b\n\x04\x04\x07\x02\0\
    \x12\x03.\x02!\n\r\n\x05\x04\x07\x02\0\x04\x12\x04.\x02-\x12\n\x0c\n\x05\
    \x04\x07\x02\0\x05\x12\x03.\x02\x07\n\x0c\n\x05\x04\x07\x02\0\x01\x12\
    \x03.\x08\x0e\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03.\x1f\x20\n\x0b\n\x04\
    \x04\x07\x02\x01\x12\x03/\x02!\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03/\
    \x02\n\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03/\x0b\x13\n\x0c\n\x05\x04\
    \x07\x02\x01\x01\x12\x03/\x14\x1c\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\
    \x03/\x1f\x20\n\n\n\x02\x04\x08\x12\x042\07\x01\n\n\n\x03\x04\x08\x01\
    \x12\x032\x08\x10\n\x0b\n\x04\x04\x08\x02\0\x12\x033\x02\x1d\n\r\n\x05\
    \x04\x08\x02\0\x04\x12\x043\x022\x12\n\x0c\n\x05\x04\x08\x02\0\x05\x12\
    \x033\x02\x07\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x033\x08\x0e\n\x0c\n\x05\
    \x04\x08\x02\0\x03\x12\x033\x1b\x1c\n\x0b\n\x04\x04\x08\x02\x01\x12\x034\
    \x02\x1d\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x034\x02\n\n\x0c\n\x05\x04\
    \x08\x02\x01\x06\x12\x034\x0b\x13\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\
    \x034\x14\x18\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x034\x1b\x1c\n\x0b\n\
    \x04\x04\x08\x02\x02\x12\x035\x02\x1d\n\r\n\x05\x04\x08\x02\x02\x04\x12\
    \x045\x024\x1d\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x035\x02\x07\n\x0c\n\
    \x05\x04\x08\x02\x02\x01\x12\x035\x08\x15\n\x0c\n\x05\x04\x08\x02\x02\
    \x03\x12\x035\x1b\x1c\n\x0b\n\x04\x04\x08\x02\x03\x12\x036\x02\x1d\n\r\n\
    \x05\x04\x08\x02\x03\x04\x12\x046\x025\x1d\n\x0c\n\x05\x04\x08\x02\x03\
    \x05\x12\x036\x02\x07\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x036\x08\x0f\n\
    \x0c\n\x05\x04\x08\x02\x03\x03\x12\x036\x1b\x1c\n\n\n\x02\x04\t\x12\x049\
    \0<\x01\n\n\n\x03\x04\t\x01\x12\x039\x08\x14\n\x0b\n\x04\x04\t\x02\0\x12\
    \x03:\x02\x1d\n\r\n\x05\x04\t\x02\0\x04\x12\x04:\x029\x16\n\x0c\n\x05\
    \x04\t\x02\0\x05\x12\x03:\x02\x07\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03:\
    \x08\x0e\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03:\x1b\x1c\n\x0b\n\x04\x04\t\
    \x02\x01\x12\x03;\x02\x1d\n\x0c\n\x05\x04\t\x02\x01\x04\x12\x03;\x02\n\n\
    \x0c\n\x05\x04\t\x02\x01\x06\x12\x03;\x0b\x13\n\x0c\n\x05\x04\t\x02\x01\
    \x01\x12\x03;\x14\x18\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03;\x1b\x1cb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(Property::generated_message_descriptor_data());
            messages.push(VertexId::generated_message_descriptor_data());
            messages.push(Vertex::generated_message_descriptor_data());
            messages.push(EdgeValue::generated_message_descriptor_data());
            messages.push(OneEdgeValue::generated_message_descriptor_data());
            messages.push(EdgeKey::generated_message_descriptor_data());
            messages.push(PartEdgeKey::generated_message_descriptor_data());
            messages.push(EdgeItem::generated_message_descriptor_data());
            messages.push(EdgeList::generated_message_descriptor_data());
            messages.push(PartEdgeList::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
